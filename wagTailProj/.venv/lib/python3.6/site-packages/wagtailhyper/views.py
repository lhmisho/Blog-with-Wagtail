import json

from django.conf import settings
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator
from django.http.response import (HttpResponse, HttpResponseNotAllowed,
                                  JsonResponse)
from django.shortcuts import redirect, render
from django.template import RequestContext
from django.views.decorators.csrf import csrf_exempt
from django.views.generic.edit import FormView
from wagtail.admin.utils import user_has_any_page_permission, user_passes_test
from wagtail.core.models import Page
from wagtail.images.models import Image

from wagtailhyper.blocks import get_block_class_for, get_js_variables, get_js_plugins
from wagtailhyper.blocks.base import CodeRenderer
from wagtailhyper.blocks.utils import get_form_class
from wagtailhyper.models import HyperSnippet, Menu, SvgImage


@user_passes_test(user_has_any_page_permission)
def hyper_editor_iframe(request):
    context = {}
    block_settings = getattr(settings, 'HYPER_EDITOR_BLOCK_CONFIG', {})
    user_stylesheets = getattr(settings, 'HYPER_EDITOR_USER_STYLESHEETS', [])
    context['block_settings'] = json.dumps(block_settings)
    context['user_stylesheets'] = user_stylesheets
    context['js_variables'] = get_js_variables()
    context['js_plugins'] = get_js_plugins()
    return render(request, 'wagtailhyper/hyper_editor.html', context=context)


def __get_pagination_data(request):
    per_page = request.GET.get('per_page', 10)
    page = request.GET.get('page', 1)
    q = request.GET.get('q', None)
    return (per_page, page, q)

def __build_paginator(query, per_page, page):
    paginator = Paginator(query, per_page)
    try:
        result = paginator.page(page)
    except PageNotAnInteger:
        result = paginator.page(1)
    except EmptyPage:
        result = paginator.page(paginator.num_pages)
    return paginator, result

@user_passes_test(user_has_any_page_permission)
def images_api(request):
    per_page, page, q = __get_pagination_data(request)

    if q is None:
        image_list = Image.objects.all()
    else:
        image_list = Image.objects.filter(title__contains=q)

    paginator, images = __build_paginator(image_list, per_page, page)

    result = {
        'total': paginator.count,
        'num_pages': paginator.num_pages,
        'current_page': page,
        'result': []
    }

    for image in images:
        result['result'].append({
            'id': image.id,
            'title': image.title,
            'url': image.file.url
        })
    return JsonResponse(result)

@user_passes_test(user_has_any_page_permission)
def pages_api(request):
    per_page, page, q = __get_pagination_data(request)

    if q is None:
        page_list = Page.objects.all()
    else:
        page_list = Page.objects.filter(title__contains=q)

    paginator, pages = __build_paginator(page_list, per_page, page)

    result = {
        'total': paginator.count,
        'num_pages': paginator.num_pages,
        'current_page': page,
        'result': []
    }

    for page in pages:
        result['result'].append({
            'id': page.id,
            'title': page.title,
            'url': page.get_url()
        })
    return JsonResponse(result)

@user_passes_test(user_has_any_page_permission)
def menus_api(request):
    per_page, page, q = __get_pagination_data(request)

    if q is None:
        menu_list = Menu.objects.all()
    else:
        menu_list = Menu.objects.filter(title__contains=q)

    paginator, menus = __build_paginator(menu_list, per_page, page)

    result = {
        'total': paginator.count,
        'num_pages': paginator.num_pages,
        'current_page': page,
        'result': []
    }

    for menu in menus:
        result['result'].append({
            'id': menu.id,
            'title': menu.title
        })
    return JsonResponse(result)

@user_passes_test(user_has_any_page_permission)
def snippets_api(request):
    per_page, page, q = __get_pagination_data(request)

    if q is None:
        snippet_list = HyperSnippet.objects.all()
    else:
        snippet_list = HyperSnippet.objects.filter(title__contains=q)

    paginator, snippets = __build_paginator(snippet_list, per_page, page)

    result = {
        'total': paginator.count,
        'num_pages': paginator.num_pages,
        'current_page': page,
        'result': []
    }

    for snippet in snippets:
        result['result'].append({
            'id': snippet.id,
            'title': snippet.title
        })
    return JsonResponse(result)

@user_passes_test(user_has_any_page_permission)
def forms_api(request):
    registered_forms = getattr(settings, 'HYPER_FORMS', [])
    registered_forms = list(map(lambda x: {'id': x['id'], 'title': x['title']}, registered_forms))
    return JsonResponse(registered_forms, safe=False)

@csrf_exempt
@user_passes_test(user_has_any_page_permission)
def partial_render(request):
    if request.method == 'POST':
        body_str = request.body
        value = json.loads(body_str)
        if value:
            return  render(request, 'wagtailhyper/preview.html', {'value': value})
    return HttpResponseNotAllowed()



@user_passes_test(user_has_any_page_permission)
def svgs_api(request):
    per_page, page, q = __get_pagination_data(request)

    if q is None:
        svg_list = SvgImage.objects.all()   # my SVG model
    else:
        svg_list = SvgImage.objects.filter(title__contains=q)

    paginator, svgs = __build_paginator(svg_list, per_page, page)

    result = {
        'total': paginator.count,
        'num_pages': paginator.num_pages,
        'current_page': page,
        'result': []
    }

    for svg in svgs:
        result['result'].append({
            'id': svg.id,
            'title': svg.title,
            'url': svg.image.url
        })
    return JsonResponse(result)





