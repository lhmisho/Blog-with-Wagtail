from django import template
from django.template import loader
from django.utils.safestring import mark_safe
from wagtailhyper.models import MegaMenuItem, Menu, MenuItemToMenu, SvgImage
from wagtailhyper.blocks import get_block_class_for
from wagtail.images.models import Image
from wagtailhyper.blocks.base import CodeRenderer
from wagtailhyper.fields import HyperFieldResponse
register = template.Library()


@register.simple_tag(takes_context=True)
def megamenu(context, template='wagtailhyper/megamenu.html'):
    context = context or {}
    context.update({
        'menu_items': MegaMenuItem.objects.all().order_by('order')
    })
    return loader.render_to_string(template, context.flatten())

@register.simple_tag(takes_context=True)
def render_menu(context, code, nested=True, template='wagtailhyper/menu.html'):
    context = context or {}
    menu = Menu.objects.filter(code=code).first()
    menu_items = MenuItemToMenu.objects.filter(menu=menu)
    context.update({
        'menu': menu,
        'menu_items': menu_items
    })
    return loader.render_to_string(template, context.flatten())

class HyperNode(template.Node):
    def __init__(self, block_var, extra_context, use_parent_context):
        self.block_var = block_var
        self.extra_context = extra_context
        self.use_parent_context = use_parent_context


    def render(self, context):
        try:
            value = self.block_var.resolve(context)
        except template.VariableDoesNotExist:
            return ''

        if isinstance(value, dict): # its an preview
            codeRenderer = CodeRenderer()
            bl_class = get_block_class_for(value.get('type', 'INVALID_PLUGIN_WITH_NO_TYPE'))
            if bl_class:
                instance = bl_class(codeRenderer)
                return instance.render(value, context)
            else:
                return ''
        elif isinstance(value, str):
            try:
                value = HyperFieldResponse.from_str(value)
                return value.render(context)
            except Exception as e:
                print(e)
                return ''
        else:
            return value.render(context)


def __render_helper(parser, token):

    tokens = token.split_contents()

    try:
        tag_name = tokens.pop(0)
        block_var_token = tokens.pop(0)
    except IndexError:
        raise template.TemplateSyntaxError("%r tag requires at least one argument" % tag_name)

    block_var = parser.compile_filter(block_var_token)

    if tokens and tokens[0] == 'with':
        tokens.pop(0)
        extra_context = token_kwargs(tokens, parser)
    else:
        extra_context = None

    use_parent_context = True
    if tokens and tokens[0] == 'only':
        tokens.pop(0)
        use_parent_context = False

    if tokens:
        raise template.TemplateSyntaxError("Unexpected argument to %r tag: %r" % (tag_name, tokens[0]))

    return HyperNode(block_var, extra_context, use_parent_context)

@register.tag
def hyperfield_render(parser, token):
    return __render_helper(parser, token)

@register.tag
def hyper_preview(parser, token):
    return __render_helper(parser, token)


def __build_rendition_txt(attr):

    if attr is None:
        return None

    if attr.get('width') and attr.get('height') is None:
        return 'width-{w}'.format(w=attr['width'])

    if attr.get('height') and attr.get('width') is None:
        return 'height-{w}'.format(w=attr['height'])

    if attr.get('width') and attr.get('height') and attr.get('fill'):
        if attr.get('crop'):
            return 'fill-{w}x{h}-c{c}'.format(w=attr['width'], h=attr['height'], c=attr['cropNearFocus'])
        return 'fill-{w}x{h}'.format(w=attr['width'], h=attr['height'])
    else:
        return None

@register.simple_tag(takes_context=True)
def render_wagtail_image(context, image, template="wagtailhyper/partials/image.html"):
    mainImage = None
    try:
        mainImage = Image.objects.filter(id=image.get('id', -1)).first()
        reditionTxt = __build_rendition_txt(image.get('attr'))
        if (reditionTxt):
            mainImage = mainImage.get_rendition(reditionTxt)
    except Exception as e:
        pass
    context = context or {}
    context.update({
        'image': mainImage,
        'attr': image['attr']
    })
    return loader.render_to_string(template, context.flatten())

@register.simple_tag(takes_context=True)
def render_form(context, form_id, template='wagtailhyper/partials/form.html'):
    if context.get(form_id):
        return loader.render_to_string(template, {
            'form': context.get(form_id)
        })
    else:
        return loader.render_to_string(template, {
            'form': context.get('form')
        })

@register.simple_tag(takes_context=True)
def active_class(context, menuItem):
    if context.get('request'):
        if menuItem.is_active(context.get('request')):
            return 'active'
    return ''

@register.filter()
def dynamic_var(obj, key):
    if isinstance(obj, dict):
        return obj.get(key, '')
    else:
        return getattr(obj, key, '')

@register.simple_tag(takes_context=True)
def render_svg(context, instance):
    if isinstance(instance, SvgImage):
        if instance.image:
            instance.image.open(mode='rb')
            lines = instance.image.readlines()
            instance.image.close()
            return mark_safe(str('\n'.join([line.decode("utf-8") for line in lines])))
    return ''