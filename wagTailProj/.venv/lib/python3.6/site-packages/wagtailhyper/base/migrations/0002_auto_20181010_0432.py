# Generated by Django 2.0 on 2018-10-10 04:32

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtailhyper.fields


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailimages', '0020_add-verbose-name'),
        ('wagtailhyper', '0013_auto_20181001_0607'),
        ('wagtailredirects', '0005_capitalizeverbose'),
        ('wagtailforms', '0003_capitalizeverbose'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0040_page_draft_title'),
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('default', 'default')], default='default', help_text='Select which theme to use', max_length=255)),
                ('website_logo', models.ImageField(blank=True, null=True, upload_to='')),
                ('website_favicon_icon', models.ImageField(blank=True, null=True, upload_to='')),
                ('product_toolbar_base_url', models.URLField(blank=True, null=True)),
                ('footer_logo', models.ImageField(blank=True, null=True, upload_to='')),
                ('google_analytics_key', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_app_id', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_admins', models.CharField(blank=True, max_length=255, null=True)),
                ('open_graph_type', models.CharField(blank=True, default='website', max_length=30, null=True)),
                ('facebook_url', models.URLField(blank=True, help_text='Your Facebook page URL', null=True)),
                ('instagram_url', models.URLField(blank=True, help_text='Your Instagram URL', null=True)),
                ('twitter_url', models.URLField(blank=True, help_text='Your Twitter URL', null=True)),
                ('google_plus_url', models.URLField(blank=True, help_text='Your google plus URL', null=True)),
                ('youtube_url', models.URLField(blank=True, help_text='Your YouTube channel or user account URL', null=True)),
                ('linkedin_url', models.URLField(blank=True, help_text='Your linkedin URL', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasicSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', wagtailhyper.fields.HyperField()),
            ],
        ),
        migrations.CreateModel(
            name='StandardBasePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('content', wagtailhyper.fields.HyperField(blank=True, default='[]', null=True)),
                ('og_title', models.CharField(blank=True, max_length=255, null=True)),
                ('og_description', models.TextField(blank=True, null=True)),
                ('select_template', models.CharField(blank=True, max_length=255, null=True)),
                ('include_in_sitemap', models.BooleanField(default=True)),
                ('priority', models.DecimalField(decimal_places=2, default=0.8, max_digits=4)),
                ('changefreq', models.CharField(choices=[('always', 'always'), ('hourly', 'hourly'), ('daily', 'daily'), ('weekly', 'weekly'), ('monthly', 'monthly'), ('yearly', 'yearly'), ('never', 'never')], default='daily', max_length=15)),
                ('og_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('primary_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='StandardPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='base.StandardBasePage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_standardpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='standardpage',
            name='page_ptr',
        ),
        migrations.DeleteModel(
            name='StandardPage',
        ),
        migrations.AddField(
            model_name='standardbasepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='base.StandardPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='applicationsettings',
            name='footer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.BasicSnippet'),
        ),
        migrations.AddField(
            model_name='applicationsettings',
            name='header_top',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.BasicSnippet'),
        ),
        migrations.AddField(
            model_name='applicationsettings',
            name='site',
            field=models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site'),
        ),
    ]
