from django.core.exceptions import ValidationError
from django.db import models
from django.shortcuts import redirect, render
from modelcluster.fields import ParentalKey
from modelcluster.models import ClusterableModel
from wagtail.admin.edit_handlers import (FieldPanel, InlinePanel, ObjectList,
                                         PageChooserPanel, TabbedInterface)
from wagtail.core.models import AbstractPage, Orderable, Page
from wagtail.images.edit_handlers import ImageChooserPanel
from wagtail.snippets.models import register_snippet

from wagtailhyper.blocks.utils import get_form_class
from wagtailhyper.fields import HyperField, HyperFieldPanel

# New import for image 
from django.utils.html import format_html
from django.core.exceptions import ValidationError
import xml.etree.cElementTree as et

# from wagtailhyper.settings import ENABLED_WAGTAIL_HYPER_MEGAMENU

class AbstractMenuItem(models.Model):
    title = models.CharField(max_length=255)
    page = models.ForeignKey(Page, models.CASCADE, blank=True, null=True)
    url = models.CharField(max_length=255, blank=True, null=True)
    image = models.ForeignKey(
        'wagtailimages.Image',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='+',
        help_text='Choose Menu Icon'
    )
    description = models.TextField(blank=True, null=True, default=None)

    panels = [
        FieldPanel('title'),
        PageChooserPanel('page'),
        FieldPanel('url'),
        ImageChooserPanel('image'),
        FieldPanel('description'),
    ]

    class Meta:
        abstract = True

    def get_url(self):
        if self.page:
            return self.page.get_url()
        elif self.url:
            return self.url
        else:
            return '#'

    def is_active(self, request):
        url = self.get_url()
        if url == request.get_full_path():
            return True
        elif url == request.build_absolute_uri():
            return True
        return False


class MegaMenuItem(AbstractMenuItem):
    content = HyperField(blank=True, null=True, default='[]')
    mobile_menu = HyperField(blank=True, null=True, default='[]')
    has_dropdown = models.BooleanField(default=False)
    order = models.PositiveIntegerField()

    general_panel = [
        FieldPanel('title'),
        PageChooserPanel('page'),
        FieldPanel('url'),
        FieldPanel('order')
    ]

    submenu_panel = [
        FieldPanel('has_dropdown'),
        HyperFieldPanel('content'),
    ]

    mobile_panel = [
        HyperFieldPanel('mobile_menu'),
    ]

    edit_handler = TabbedInterface([
        ObjectList(general_panel, heading='General'),
        ObjectList(submenu_panel, heading='Designer'),
        ObjectList(mobile_panel, heading='Mobile Designer')
    ])

    def __str__(self):
        return self.title

class Menu(ClusterableModel):
    title = models.CharField(max_length=255)
    code = models.SlugField()

    general_panel = [
        FieldPanel('title'),
        FieldPanel('code'),
        InlinePanel('menu_item_for_menu', label="Menu Items"),
    ]

    edit_handler = TabbedInterface([
        ObjectList(general_panel, heading='General'),
    ])

    def __str__(self):
        return self.title


class MenuItem(AbstractMenuItem):
    submenu = models.ForeignKey(Menu, blank=True, null=True, on_delete=models.SET_NULL)

    panels = AbstractMenuItem.panels + [
        FieldPanel('submenu')
    ]

class MenuItemToMenu(Orderable, MenuItem):
    menu = ParentalKey('Menu', related_name='menu_item_for_menu')

    def clean(self):
        super().clean()
        if self.submenu:
            if self.menu == self.submenu: # self referencing not allowed
                raise ValidationError({'submenu': 'Cannot Reference Parent Menu as Sub Menu'})
            menuItems = MenuItemToMenu.objects.filter(menu=self.submenu)
            for menuItem in menuItems:
                if menuItem.submenu == self.menu:
                    raise ValidationError({'submenu': 'Circular Reference not allowed'})

@register_snippet
class HyperSnippet(models.Model):
    title = models.CharField(max_length=255)
    code = models.SlugField(unique=True)
    content = HyperField(default='[]')

    panels = [
        FieldPanel('title'),
        FieldPanel('code'),
        HyperFieldPanel('content')
    ]

    def __str__(self):
        return self.title

class WagtailHyperPage(Page):

    class Meta:
        abstract = True

    def serve(self, request, *args, **kwargs):
        if request.method == 'POST':
            form_id = request.POST.get('form_id')
            if form_id:
                form_class = get_form_class(form_id)
                form = form_class(request.POST, request=request)
                if form.is_valid():
                    return redirect(request.POST.get('success_url', request.get_full_path()))
                else:
                    context = self.get_context(request)
                    context[form_id] = form
                    return render(
                        request,
                        self.get_template(request),
                        context
                    )
        else:
            return super().serve(request, *args, **kwargs)


""" method for checking the file is svg or not """
def validate_svg(f):
    # Find "start" word in file and get "tag" from there
    f.seek(0)
    tag = None
    try:
        for event, el in et.iterparse(f, ('start',)):
            tag = el.tag
            break
    except et.ParseError:
        pass

    # Check that this "tag" is correct
    if tag != '{http://www.w3.org/2000/svg}svg':
        raise ValidationError('Uploaded file is not an image or SVG file.')

    # Do not forget to "reset" file
    f.seek(0)

    return f


"""Class for svg file upload"""
class SvgImage(models.Model):
    title = models.CharField(max_length=250)
    image = models.FileField(null=True, blank=True, validators=[validate_svg])

    # it's returning HTML format for list_display on wagtail_hooks.py
    def svgListDisplay(self):
        return format_html(
            '<img src="{}" alt="{}" height="87px" width="100px" />',
            self.image,
            self.title,
        )

    panels = [
        FieldPanel('title'),
        FieldPanel('image')
    ]

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "SvgImage"
        verbose_name_plural = "Svg Images" 
