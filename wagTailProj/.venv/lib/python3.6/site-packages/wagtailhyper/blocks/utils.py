import importlib
from django.conf import settings

def dict_to_css(css_dict, pretty=False):
    seperator = '\n'
    tab = '\t'
    if not pretty:
        seperator = ''
        tab = ''

    css_rules = []
    for selector, rules in css_dict.items():
        tmp = selector + '{' + seperator
        tmp_rules = []
        if isinstance(rules, dict):
            for rule, value in rules.items():
                tmp_rules.append(tab + rule + ':' + value + ';')
        tmp += seperator.join(tmp_rules)
        tmp = tmp + '}'
        css_rules.append(tmp)

    return seperator.join(css_rules)


def dynamic_import(val):
    try:
        # Nod to tastypie's use of importlib.
        parts = val.split('.')
        module_path, class_name = '.'.join(parts[:-1]), parts[-1]
        module = importlib.import_module(module_path)
        return getattr(module, class_name)
    except ImportError as e:
        msg = "Could not import '%s' for setting. %s: %s." % (val, e.__class__.__name__, e)
        raise ImportError(msg)

def get_form_class(form_id):
    forms = getattr(settings, 'HYPER_FORMS', [])
    for item in forms:
        if item.get('id') == form_id:
            return dynamic_import(item.get('class'))
    return None