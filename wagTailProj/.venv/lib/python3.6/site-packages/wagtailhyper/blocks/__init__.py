from .base import Block
from .core import *
from functools import reduce
from django.conf import settings

BLOCK_REGISTRY = {}
EXCLUDED_LIST = getattr(settings, 'WAGTAILHYPER_EXCLUDE_BLOCKS', [])

def add_to_block_registry(name, block_class):
    if issubclass(block_class, Block):
        if name not in EXCLUDED_LIST: # Check if not explicitly excluded
            BLOCK_REGISTRY[name] = block_class
    else:
        raise Exception('%s is not a valid block class' % block_class)

def get_block_class_for(name):
    return BLOCK_REGISTRY.get(name, StylableBlock)

def get_js_variables():
    js_variables = {}
    for k, v in BLOCK_REGISTRY.items():
        if issubclass(v, Block):
            to_add = {}
            if callable(v.JS_VARIABLES):
                to_add = v.JS_VARIABLES()
            else:
                to_add = v.JS_VARIABLES
            js_variables.update(to_add)
    return js_variables

def get_js_plugins():
    js_plugins = []
    for k, v in BLOCK_REGISTRY.items():
        if issubclass(v, Block):
            if v.JS_PLUGINS is not None:
                if isinstance(v.JS_PLUGINS, list):
                    js_plugins = js_plugins + v.JS_PLUGINS
                else:
                    js_plugins.append(v.JS_PLUGINS)
    return js_plugins

add_to_block_registry('column', ColumnBlock)
add_to_block_registry('tab', TabBlock)
add_to_block_registry('menu', MenuBlock)
add_to_block_registry('snippet', SnippetBlock)
add_to_block_registry('form', FormBlock)
add_to_block_registry('svg', SvgImageBlock)

add_to_block_registry('list', ListBlock)
add_to_block_registry('heading', HeadingBlock)
add_to_block_registry('page', PageChooserBlock)
add_to_block_registry('search', SearchBlock)
add_to_block_registry('pricing_table', PricingTableBlock)
