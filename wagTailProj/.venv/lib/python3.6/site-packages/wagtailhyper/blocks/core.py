from wagtailhyper.blocks.base import Block, StylableBlock
from django.apps import apps
from wagtailhyper.blocks.utils import dynamic_import, get_form_class
from django.conf import settings
from django.urls import reverse_lazy

COL_RESP_SIZES = ['XS', 'SM', 'MD', 'LG']


class ColumnBlock(StylableBlock):

    def __build_col_class(self, colSettings):
        colClass = []
        if colSettings:
            for sz in COL_RESP_SIZES:
                colSz = colSettings.get('size' + sz, '12')
                tmpSZ = ['col']
                if sz != 'XS':
                    tmpSZ.append(sz.lower())
                tmpSZ.append(str(colSz))
                colClass.append('-'.join(tmpSZ))

                tmpOff = ['offset']
                colOff = colSettings.get('offset' + sz)
                if colOff and colOff != '':
                    if sz != 'XS':
                        tmpOff.append(sz.lower())
                    tmpOff.append(str(colOff))
                    colClass.append('-'.join(tmpOff))
        return ' '.join(colClass)

    def get_context(self, value, parent_context=None):
        value['colClass'] = self.__build_col_class(value.get('settings'))
        context = super().get_context(value, parent_context=parent_context)
        return context

class TabBlock(StylableBlock):

    def get_rendered_children(self, obj, context):
        if obj.get('children') is not None:
            from . import get_block_class_for
            totalChilds = []
            for child in obj.get('children'):
                bl_class = get_block_class_for(child.get('type', 'INVALID_PLUGIN_WITH_NO_TYPE'))
                if bl_class:
                    instance = bl_class(self.codeRenderer)
                    rendered_child = instance.render(child, context)
                    totalChilds.append({
                        'child': child,
                        'rendered': rendered_child
                    })
            return totalChilds
        return []

class MenuBlock(StylableBlock):

    JS_VARIABLES = {
        'WAGTAIL_MENU_SEARCH_URL': reverse_lazy('wagtailhyper_api_menus')
    }

    JS_PLUGINS = 'wagtailhyper/blocks/menuchooser.js'

    def get_context(self, value, parent_context=None):
        context = super(MenuBlock, self).get_context(value, parent_context)

        Menu = apps.get_model('wagtailhyper', 'menu')
        MenuItemToMenu = apps.get_model('wagtailhyper', 'menuItemToMenu')
        try:
            menu_id = value.get('settings', {}).get('menu', {}).get('id', None)
            context['menu'] = Menu.objects.filter(id=menu_id).first()
            context['menuItems'] = MenuItemToMenu.objects.filter(menu=context['menu'])
        except Exception as e:
            print(e)
        return context

class SnippetBlock(StylableBlock):

    JS_PLUGINS = 'wagtailhyper/blocks/snippetchooser.js'

    JS_VARIABLES = {
        'WAGTAIL_SNIPPET_SEARCH_URL': reverse_lazy('wagtailhyper_api_snippets')
    }

    def get_context(self, value, parent_context=None):
        context = super().get_context(value, parent_context)

        HyperSnippet = apps.get_model('wagtailhyper', 'HyperSnippet')
        try:
            snippet_id = value.get('settings', {}).get('snippet', {}).get('id', None)
            context['snippet'] = HyperSnippet.objects.filter(id=snippet_id).first()
        except Exception as e:
            print(e)
        return context


class FormBlock(StylableBlock):

    JS_VARIABLES = {
        'WAGTAIL_FORM_SEARCH_URL': reverse_lazy('wagtailhyper_api_forms')
    }

    JS_PLUGINS = 'wagtailhyper/blocks/formchooser.js'

    def get_context(self, value, parent_context=None):
        context = super().get_context(value, parent_context)
        form_id = value.get('settings', {}).get('form', {}).get('id', None)
        if form_id:
            form_class = get_form_class(form_id)
            if context.get('form') is None:
                context['form'] = form_class(request=context.get('request'))
        return context

class PageChooserBlock(StylableBlock):
    JS_VARIABLES = {
        'WAGTAIL_PAGE_SEARCH_URL': reverse_lazy('wagtailhyper_api_pages')
    }
    JS_PLUGINS = 'wagtailhyper/blocks/pagechooser.js'

class ListBlock(StylableBlock):
    JS_PLUGINS = 'wagtailhyper/blocks/list.js'

class HeadingBlock(StylableBlock):
    JS_PLUGINS = 'wagtailhyper/blocks/heading.js'

class SearchBlock(StylableBlock):
    JS_PLUGINS = 'wagtailhyper/blocks/searchblock.js'

class PricingTableBlock(StylableBlock):
    JS_PLUGINS = 'wagtailhyper/blocks/pricing_table.js'


# class for svg block
class SvgImageBlock(StylableBlock):
    JS_PLUGINS = [
        'wagtailhyper/blocks/svgchooser.js',
        'wagtailhyper/blocks/svgblock.js'
    ]
    JS_VARIABLES = {
        'WAGTAIL_SVG_SEARCH_URL': reverse_lazy('wagtailhyper_api_svgs')
    }

